  Compiling CUDA source file kernel.cu...
  
  C:\Users\varga\source\repos\CUDA_MatrixMultiplication>"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.1\bin\nvcc.exe" -gencode=arch=compute_52,code=\"sm_52,compute_52\" --use-local-env -ccbin "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\bin\HostX86\x64" -x cu   -I"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.1\include" -I"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.1\include"     --keep-dir x64\Release -maxrregcount=0  --machine 64 --compile -cudart static     -DWIN32 -DWIN64 -DNDEBUG -D_CONSOLE -D_MBCS -Xcompiler "/EHsc /W3 /nologo /O2 /Fdx64\Release\vc142.pdb /FS   /MD " -o x64\Release\kernel.cu.obj "C:\Users\varga\source\repos\CUDA_MatrixMultiplication\kernel.cu" 
  kernel.cu
C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.1/include\thrust/system/cuda/detail/reduce.h(945): warning C4244: 'initializing': conversion from 'Size' to 'thrust::detail::int32_t', possible loss of data
          with
          [
              Size=size_type
          ]
  C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.1/include\thrust/system/cuda/detail/reduce.h(1021): note: see reference to function template instantiation 'T thrust::cuda_cub::detail::reduce_n_impl<thrust::cuda_cub::tag,InputIt,Size,T,BinaryOp>(thrust::cuda_cub::execution_policy<thrust::cuda_cub::tag> &,InputIt,Size,T,BinaryOp)' being compiled
          with
          [
              T=float,
              InputIt=binop_iterator_t,
              Size=size_type,
              BinaryOp=thrust::plus<float>
          ]
  C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.1/include\thrust/system/cuda/detail/inner_product.h(64): note: see reference to function template instantiation 'T thrust::cuda_cub::reduce_n<thrust::cuda_cub::tag,binop_iterator_t,size_type,T,ReduceOp>(thrust::cuda_cub::execution_policy<thrust::cuda_cub::tag> &,InputIt,Size,T,BinaryOp)' being compiled
          with
          [
              T=float,
              ReduceOp=thrust::plus<float>,
              InputIt=binop_iterator_t,
              Size=size_type,
              BinaryOp=thrust::plus<float>
          ]
  C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.1/include\thrust/system/cuda/detail/inner_product.h(82): note: see reference to function template instantiation 'T thrust::cuda_cub::inner_product<thrust::cuda_cub::tag,InputIt1,InputIt2,T,thrust::plus<T>,thrust::multiplies<T>>(thrust::cuda_cub::execution_policy<thrust::cuda_cub::tag> &,InputIt1,InputIt1,InputIt2,T,ReduceOp,ProductOp)' being compiled
          with
          [
              T=float,
              InputIt1=thrust::detail::normal_iterator<thrust::device_ptr<double>>,
              InputIt2=thrust::detail::normal_iterator<thrust::device_ptr<double>>,
              ReduceOp=thrust::plus<float>,
              ProductOp=thrust::multiplies<float>
          ]
  C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.1/include\thrust/detail/inner_product.inl(46): note: see reference to function template instantiation 'T thrust::cuda_cub::inner_product<thrust::cuda_cub::tag,InputIterator1,InputIterator2,OutputType>(thrust::cuda_cub::execution_policy<thrust::cuda_cub::tag> &,InputIt1,InputIt1,InputIt2,T)' being compiled
          with
          [
              T=float,
              InputIterator1=thrust::detail::normal_iterator<thrust::device_ptr<double>>,
              InputIterator2=thrust::detail::normal_iterator<thrust::device_ptr<double>>,
              OutputType=float,
              InputIt1=thrust::detail::normal_iterator<thrust::device_ptr<double>>,
              InputIt2=thrust::detail::normal_iterator<thrust::device_ptr<double>>
          ]
  C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.1/include\thrust/detail/inner_product.inl(84): note: see reference to function template instantiation 'OutputType thrust::inner_product<DerivedPolicy,InputIterator1,InputIterator2,OutputType>(const thrust::detail::execution_policy_base<DerivedPolicy> &,InputIterator1,InputIterator1,InputIterator2,OutputType)' being compiled
          with
          [
              OutputType=float,
              DerivedPolicy=thrust::cuda_cub::tag,
              InputIterator1=thrust::detail::normal_iterator<thrust::device_ptr<double>>,
              InputIterator2=thrust::detail::normal_iterator<thrust::device_ptr<double>>
          ]
  C:/Users/varga/source/repos/CUDA_MatrixMultiplication/kernel.cu(162): note: see reference to function template instantiation 'OutputType thrust::inner_product<Derived,Derived,float>(InputIterator1,InputIterator1,InputIterator2,OutputType)' being compiled
          with
          [
              OutputType=float,
              Derived=thrust::detail::normal_iterator<thrust::device_ptr<double>>,
              InputIterator1=thrust::detail::normal_iterator<thrust::device_ptr<double>>,
              InputIterator2=thrust::detail::normal_iterator<thrust::device_ptr<double>>
          ]
C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.1/include\thrust/system/cuda/detail/reduce.h(973): warning C4244: 'initializing': conversion from 'Size' to 'thrust::detail::int32_t', possible loss of data
          with
          [
              Size=size_type
          ]
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.1\include\cub\agent\../grid/grid_even_share.cuh(133): warning C4244: '=': conversion from 'OffsetT' to 'int', possible loss of data
          with
          [
              OffsetT=__int64
          ]
  C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.1\include\cub\agent\../grid/grid_even_share.cuh(128): note: while compiling class template member function 'void cub::GridEvenShare<__int64>::DispatchInit(OffsetT,int,int)'
          with
          [
              OffsetT=__int64
          ]
  C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.1\include\cub\device\dispatch/dispatch_reduce.cuh(519): note: see reference to function template instantiation 'void cub::GridEvenShare<__int64>::DispatchInit(OffsetT,int,int)' being compiled
          with
          [
              OffsetT=__int64
          ]
  C:\Users\varga\AppData\Local\Temp\tmpxft_000055e0_00000000-7_kernel.cudafe1.stub.c(152): note: see reference to class template instantiation 'cub::GridEvenShare<__int64>' being compiled
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.1\include\cub\agent\../grid/grid_even_share.cuh(135): warning C4244: '=': conversion from 'OffsetT' to 'int', possible loss of data
          with
          [
              OffsetT=__int64
          ]
     Creating library C:\Users\varga\source\repos\CUDA_MatrixMultiplication\x64\Release\CUDA_MatrixMultiplication.lib and object C:\Users\varga\source\repos\CUDA_MatrixMultiplication\x64\Release\CUDA_MatrixMultiplication.exp
  LINK : /LTCG specified but no code generation required; remove /LTCG from the link command line to improve linker performance
  CUDA_MatrixMultiplication.vcxproj -> C:\Users\varga\source\repos\CUDA_MatrixMultiplication\x64\Release\CUDA_MatrixMultiplication.exe
